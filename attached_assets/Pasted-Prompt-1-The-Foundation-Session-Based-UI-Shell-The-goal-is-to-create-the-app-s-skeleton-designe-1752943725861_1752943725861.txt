Prompt 1: The Foundation & Session-Based UI Shell
"The goal is to create the app's skeleton, designed for session-based use without user accounts.

Initial View: When a user first opens the app, the main content area should be a clean welcome screen. It should feature a prominent call-to-action like 'Start a New Chat' or allow the user to immediately select a 'Tutor Persona' from a central list. There should be no chat history visible at this point.

Layout: Implement the two-pane layout: a fixed left sidebar and a main content area.

Sidebar Logic: The sidebar should contain the main navigation links: 'Chat,' 'Practice Paper Generator,' and 'Skills & Growth.' Below this, add a 'Current Session' section that will later list the chats and tools used in this session only. Everything here will be wiped clean on a page refresh.

State Management: Set up a robust frontend state management system. This is crucial for preserving the chat history and user's location within the app as they navigate between different tools during a single session. When a user switches from Chat to the Paper Generator and back, their current conversation must still be there."

Prompt 2: Secure Backend & Multi-Modal API Logic
"The goal is to build a robust, secure backend capable of not just text generation but also enriching responses with video content.

Secure Environment: On the Replit backend, use the built-in .env file to securely store your Google Gemini API key. Create a backend server with API endpoints that the frontend will call. The API key must never be exposed to the frontend.

Core Chat Endpoint: Create an endpoint like /api/chat. It will receive the user's prompt and a history of the last 10 messages from the frontend to maintain conversation context.

Youtube Integration: This is a new, critical feature. Inside your backend logic, before calling Gemini, analyze the user's prompt. If the prompt is asking for an explanation of a concept that would benefit from a visual aid (e.g., 'Explain how a car engine works,' 'Show me a tutorial on the chain rule,' 'What did the moon landing look like?'), your backend should perform a Youtube for a relevant, high-quality educational video.

Enriched API Response: Your backend should call the gemini-1.5-flash-latest model for the text response. The final JSON object sent back to the frontend should now contain two keys: one for the textResponse from Gemini, and an optional videoURL if a relevant YouTube video was found."